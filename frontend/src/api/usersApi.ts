// src/api/usersApi.ts

import axios, { AxiosError } from "axios";
import { User, UserRole, UpdateUserProfileData } from "@/types/user";

const API_URL = `${process.env.NEXT_PUBLIC_BACKEND_URL}/users`;

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
const getToken = () => localStorage.getItem("token");

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è axios
const apiClient = axios.create({
  baseURL: API_URL,
});

// –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
apiClient.interceptors.request.use((config) => {
  const token = getToken();
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// –Ñ–¥–∏–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
apiClient.interceptors.response.use(
  (response) => response,
  (error: AxiosError) => {
    if (error.response?.status === 401) {
      localStorage.removeItem("token");
      window.location.href = "/login"; // —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥—ñ–Ω
    }
    return Promise.reject(error);
  }
);

// –¢–∏–ø–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export interface CreateUserData {
  email: string;
  password: string;
  firstName?: string;
  lastName?: string;
  photo?: string | null;
  phoneNumber?: string | null;
  deliveryAddress?: string | null;
  role?: UserRole;
  averageRating?: number | null;
  isBlocked?: boolean;
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äî —Ç–∏–ø —á–µ—Ä–µ–∑ Partial
export type UpdateUserData = Partial<UpdateUserProfileData>;

export interface ResetPasswordData {
  email: string;
}

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
export const getAllUsers = async (): Promise<User[]> => {
  const { data } = await apiClient.get<User[]>("/");
  return data;
};

// ‚úÖ –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ email
export const searchUsersByEmail = async (email: string): Promise<User[]> => {
  const { data } = await apiClient.get<User[]>(
    `/?email=${encodeURIComponent(email)}`
  );
  return data;
};

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const getCurrentUserProfile = async (): Promise<User> => {
  const { data } = await apiClient.get<User>("/profile");
  return data;
};

// üîπ –û–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID
export const updateUser = async (
  userId: string,
  userData: UpdateUserData
): Promise<User> => {
  const { data } = await apiClient.patch<User>(`/${userId}`, userData);
  return data;
};

// üîπ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const updateCurrentUserProfile = async (
  userData: UpdateUserProfileData
): Promise<User> => {
  const currentUser = await getCurrentUserProfile();

  // –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç –±–µ–∑ null/undefined/empty string
  const cleanedData: Partial<UpdateUserProfileData> = {};
  Object.entries(userData).forEach(([key, value]) => {
    if (value !== null && value !== undefined && value !== "") {
      cleanedData[key as keyof UpdateUserProfileData] = value;
    }
  });

  const { data } = await apiClient.patch<User>(
    `/${currentUser.id}`,
    cleanedData
  );
  return data;
};

// üîπ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const deleteUser = async (userId: string): Promise<void> => {
  await apiClient.delete(`/${userId}`);
};

// üîπ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const blockUser = async (userId: string): Promise<User> => {
  const { data } = await apiClient.patch<User>(`/${userId}/block`);
  return data;
};

// üîπ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const unblockUser = async (userId: string): Promise<User> => {
  const { data } = await apiClient.patch<User>(`/${userId}/unblock`);
  return data;
};

// üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–≤–∞—Ç–∞—Ä
export const uploadUserAvatar = async (
  userId: string,
  file: File
): Promise<User> => {
  const formData = new FormData();
  formData.append("file", file);

  const { data } = await apiClient.post<User>(`/${userId}/avatar`, formData, {
    headers: { "Content-Type": "multipart/form-data" },
  });
  return data;
};

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ ID
export const getUserById = async (userId: string): Promise<User> => {
  const { data } = await apiClient.get<User>(`/${userId}`);
  return data;
};

export const registerUser = async (userData: CreateUserData): Promise<User> => {
  const { data } = await axios.post<User>(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/users/register`,
    userData
  );
  return data;
};

// üîπ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è (–æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –Ω–∞ email)
export const resetPassword = async (
  data: ResetPasswordData
): Promise<{ message: string }> => {
  const response = await axios.post<{ message: string }>(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/auth/reset-password`,
    data
  );
  return response.data;
};

// ‚úÖ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª "–û–±—Ä–∞–Ω–µ" (Favorites)
export const addDishToFavorites = async (dishId: string): Promise<User> => {
  const { data } = await apiClient.patch<User>(`/favorites/${dishId}`);
  return data;
};

export const removeDishFromFavorites = async (
  dishId: string
): Promise<User> => {
  const { data } = await apiClient.delete<User>(`/favorites/${dishId}`);
  return data;
};
