// src/api/dishesApi.ts

import axios from "axios";
import { 
  Dish, 
  CreateDishDto, 
  UpdateDishDto, 
  PaginatedDishesResponse, 
  DishesQueryParams 
} from "@/types/dish";


const API_URL = `${process.env.NEXT_PUBLIC_BACKEND_URL}/dishes`;

/**
 * üí° –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ –∑–∞–ø–∏—Ç—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
 */
const buildQueryString = (params: DishesQueryParams): string => {
  const searchParams = new URLSearchParams();
  
  if (params.page !== undefined) {
    searchParams.append('page', params.page.toString());
  }
  if (params.limit !== undefined) {
    searchParams.append('limit', params.limit.toString());
  }
  if (params.is_selected !== undefined) {
    searchParams.append('is_selected', params.is_selected.toString());
  }
  if (params.query) {
    searchParams.append('query', params.query);
  }
  
  // ‚úÖ –ù–û–í–ï: –î–æ–¥–∞—î–º–æ Category
  if (params.category && params.category !== 'all') {
    searchParams.append('category', params.category);
  }
  
  // ‚úÖ –ù–û–í–ï: –î–æ–¥–∞—î–º–æ Ingredients (—è–∫—â–æ —ó—Ö –¥–µ–∫—ñ–ª—å–∫–∞, –≤–æ–Ω–∏ –±—É–¥—É—Ç—å —è–∫ ?ingredients=A&ingredients=B)
  if (params.ingredients && params.ingredients.length > 0) {
    params.ingredients.forEach(ing => {
      searchParams.append('ingredients', ing);
    });
  }

  const queryString = searchParams.toString();
  return queryString ? `?${queryString}` : '';
};


// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç—Ä–∞–≤–∏ (–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é —Ç–∞ –ø–æ—à—É–∫–æ–º)
// –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —î —î–¥–∏–Ω–æ—é —Ç–æ—á–∫–æ—é –≤—Ö–æ–¥—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ç—Ä–∞–≤.
// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç—Ä–∞–≤–∏ (–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é —Ç–∞ –ø–æ—à—É–∫–æ–º)
export const fetchDishesApi = async (
  params: DishesQueryParams = {}
): Promise<PaginatedDishesResponse> => {
  
  const queryString = buildQueryString(params);
  
  // ‚ùå –í–ò–î–ê–õ–Ø–Ñ–ú–û –£–ú–û–í–£ –ó params.query:
  // –Ø–∫—â–æ —î –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç /dishes/search
  // if (params.query) { url = `${API_URL}/search`; }
  
  // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–∏—à–µ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
  let url = `${API_URL}${queryString}`; 
  
  // ‚úÖ –û—á—ñ–∫—É—î–º–æ PaginatedDishesResponse –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É
  const { data } = await axios.get<PaginatedDishesResponse>(url);
  return data;
};


// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É –ø–æ id
export const fetchDishByIdApi = async (id: number): Promise<Dish> => {
  const { data } = await axios.get<Dish>(`${API_URL}/${id}`);
  return data;
};

// üîπ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É
export const createDishApi = async (dishData: CreateDishDto): Promise<Dish> => {
  const { data } = await axios.post<Dish>(API_URL, dishData);
  return data;
};

// üîπ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É
export const updateDishApi = async (id: number, dto: UpdateDishDto): Promise<Dish> => {
  const { data } = await axios.patch<Dish>(`${API_URL}/${id}`, dto);
  return data;
};

// üîπ –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É
export const deleteDishApi = async (id: number): Promise<Dish> => {
  const { data } = await axios.delete<Dish>(`${API_URL}/${id}`);
  return data;
};

// üîπ API-–º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–±–æ—Ä—É —Å—Ç—Ä–∞–≤–∏
export const selectDishApi = async (id: number): Promise<Dish> => {
  const { data } = await axios.patch<Dish>(`${API_URL}/${id}/select`);
  return data;
};

// üîπ API-–º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —Å—Ç—Ä–∞–≤–∏
export const unselectDishApi = async (id: number): Promise<Dish> => {
  const { data } = await axios.patch<Dish>(`${API_URL}/${id}/unselect`);
  return data;
};

export const fetchSelectedDishesApi = async (): Promise<Dish[]> => {
  const { data } = await axios.get<Dish[]>(`${API_URL}/selected`);
  return data;
};

// ‚ùå –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É searchDishesApi —Ç–∞ fetchSelectedDishesApi, 
// –æ—Å–∫—ñ–ª—å–∫–∏ —ó—Ö —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Ç–µ–ø–µ—Ä —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π —É fetchDishesApi.


// // src/api/dishesApi.ts

// import axios from "axios";
// import { Dish, CreateDishDto, UpdateDishDto } from "@/types/dish";

// const API_URL = `${process.env.NEXT_PUBLIC_BACKEND_URL}/dishes`;

// // üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç—Ä–∞–≤–∏
// export const fetchDishesApi = async (): Promise<Dish[]> => {
//   const { data } = await axios.get<Dish[]>(API_URL);
//   return data;
// };

// // ‚úÖ –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ—à—É–∫—É —Å—Ç—Ä–∞–≤ –∑–∞ –Ω–∞–∑–≤–æ—é
// export const searchDishesApi = async (query: string): Promise<Dish[]> => {
//   // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `encodeURIComponent` –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è URL
//   const { data } = await axios.get<Dish[]>(`${API_URL}/search?query=${encodeURIComponent(query)}`);
//   return data;
// };

// // üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É –ø–æ id
// export const fetchDishByIdApi = async (id: number): Promise<Dish> => {
//   const { data } = await axios.get<Dish>(`${API_URL}/${id}`);
//   return data;
// };

// // üîπ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É
// export const createDishApi = async (dishData: CreateDishDto): Promise<Dish> => {
//   const { data } = await axios.post<Dish>(API_URL, dishData);
//   return data;
// };

// // üîπ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É
// export const updateDishApi = async (id: number, dto: UpdateDishDto): Promise<Dish> => {
//   const { data } = await axios.patch<Dish>(`${API_URL}/${id}`, dto);
//   return data;
// };

// // üîπ –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É
// export const deleteDishApi = async (id: number): Promise<Dish> => {
//   const { data } = await axios.delete<Dish>(`${API_URL}/${id}`);
//   return data;
// };

// // ‚úÖ –ù–æ–≤–∏–π API-–º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–±–æ—Ä—É —Å—Ç—Ä–∞–≤–∏
// export const selectDishApi = async (id: number): Promise<Dish> => {
//   const { data } = await axios.patch<Dish>(`${API_URL}/${id}/select`);
//   return data;
// };

// // ‚úÖ –ù–æ–≤–∏–π API-–º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —Å—Ç—Ä–∞–≤–∏
// export const unselectDishApi = async (id: number): Promise<Dish> => {
//   const { data } = await axios.patch<Dish>(`${API_URL}/${id}/unselect`);
//   return data;
// };

// // ‚úÖ –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Å—Ç—Ä–∞–≤
// export const fetchSelectedDishesApi = async (): Promise<Dish[]> => {
//   const { data } = await axios.get<Dish[]>(`${API_URL}?is_selected=true`);
//   return data;
// };