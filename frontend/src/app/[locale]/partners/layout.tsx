// src/app/locale/partners/layout.tsx

"use client";

import { useRouter, usePathname } from "next/navigation";
import { ReactNode, useEffect } from "react";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store"; // –ü—Ä–∏–ø—É—â–µ–Ω–æ, —â–æ —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö
import styles from "./page.module.scss";

const TABS = ["personal", "allDishes", "edit", "orders"];

export default function PartnerLayout({ children }: { children: ReactNode }) {
  const router = useRouter();
  const pathname = usePathname(); // üí° –î–û–î–ê–ù–û: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ —Ä–æ–ª—ñ –∑ Redux

  const { token } = useSelector((state: RootState) => state.auth);
  const { data: profileUser } = useSelector((state: RootState) => state.user);
  const isAuthenticated = !!token;
  const isPartner = profileUser?.role?.toLowerCase() === "partner"; // –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–∑–æ–≤–∏–π —à–ª—è—Ö –∑ –ª–æ–∫–∞–ª–ª—é

  const loginPath = pathname.startsWith("/en/") ? "/en/login" : "/uk/login";

  const basePath = pathname.startsWith("/en/partners")
    ? "/en/partners"
    : pathname.startsWith("/uk/partners")
    ? "/uk/partners"
    : "/partners";

  useEffect(() => {
    // 1. –ü–ï–†–ï–í–Ü–†–ö–ê –ê–í–¢–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–á –¢–ê –†–û–õ–Ü
    if (!isAuthenticated || !isPartner) {
      // –Ø–∫—â–æ –Ω–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π –∞–±–æ –Ω–µ –ø–∞—Ä—Ç–Ω–µ—Ä, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ª–æ–≥—ñ–Ω—É.
      router.replace(loginPath);
      return; // –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    } // 2. –†–ï–î–Ü–†–ï–ö–¢ –ù–ê –ü–Ü–î–°–¢–û–†–Ü–ù–ö–£ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞)

    if (pathname === basePath) {
      router.push(`${basePath}/personal`);
    }
  }, [pathname, router, basePath, isAuthenticated, isPartner, loginPath]); // 3. –ë–õ–û–ö–£–í–ê–ù–ù–Ø –†–ï–ù–î–ï–†–ò–ù–ì–£

  if (!isAuthenticated || !isPartner) {
    // –ù–µ —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –≤–º—ñ—Å—Ç, –ø–æ–∫–∏ –Ω–µ –≤—ñ–¥–±—É–ª–æ—Å—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    return null;
  } // üí° –ó–º—ñ–Ω–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤

  return (
    <div className={styles.container}>
         <h2 className={styles.title}>–ü–∞–Ω–µ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞</h2>  {" "}
      <div className={styles.buttonGroup}>
           {" "}
        {TABS.map((tab) => (
          <button
            key={tab}
            onClick={() => router.push(`${basePath}/${tab}`)}
            className={styles.button}
          >
                  {tab.toUpperCase()}    {" "}
          </button>
        ))}
          {" "}
      </div>
         <div>{children}</div> {" "}
    </div>
  );
}
