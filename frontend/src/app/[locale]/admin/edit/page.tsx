// src/app/admin/edit/page.tsx
"use client";

import React, { useState, useEffect, useCallback } from "react";
import styles from "./page.module.scss";
import { useLocale } from "next-intl";
// –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü—ñ —ñ–º–ø–æ—Ä—Ç–∏ API –ø—Ä–∞–≤–∏–ª—å–Ω—ñ
import {
  fetchDishesApi,
  deleteDishApi,
  selectDishApi,
  unselectDishApi,
} from "@/api/dishesApi";
import { Dish } from "@/types/dish";
import Link from "next/link";

// –ö–ª—é—á –¥–ª—è localStorage
const CATEGORY_STORAGE_KEY = "adminDishCategory";

// –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å—Ç—Ä–∞–≤
const dishTypes = [
  { value: "all", label: "üçΩÔ∏è –í—Å—ñ —Å—Ç—Ä–∞–≤–∏ / All dishes" },
  { value: "soup", label: "üç≤ –°—É–ø / Soup" },
  { value: "main_course", label: "ü•© –û—Å–Ω–æ–≤–Ω–µ –±–ª—é–¥–æ / Main course" },
  { value: "side_dish", label: "üçö –ì–∞—Ä–Ω—ñ—Ä / Side dish" },
  { value: "salad", label: "ü•ó –°–∞–ª–∞—Ç / Salad" },
  { value: "appetizer", label: "üç¢ –ó–∞–∫—É—Å–∫–∞ / Appetizer" },
];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ —Å—Ç—Ä–∞–≤–∏
const DishCard = ({
  dish,
  onDelete,
  onToggleSelect,
}: {
  dish: Dish;
  onDelete: (id: number) => void;
  onToggleSelect: (id: number, isSelected: boolean) => void;
}) => {
  const locale = useLocale();

  const handleDelete = async () => {
    if (
      confirm(
        `–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É "${locale === "uk" ? dish.name_ua : dish.name_en}"?`
      )
    ) {
      await onDelete(dish.id);
    }
  };

  const handleToggleSelect = () => {
    onToggleSelect(dish.id, dish.is_selected);
  };

  return (
    <div className={styles.dishCard}>
      <button
        className={`${styles.selectStar} ${
          dish.is_selected ? styles.selected : ""
        }`}
        onClick={handleToggleSelect}
      >
        ‚òÖ
      </button>

      <img src={dish.photo} alt={dish.name_ua} className={styles.dishPhoto} />
      <div className={styles.dishInfo}>
        <h3 className={styles.dishTitle}>
          {locale === "uk" ? dish.name_ua : dish.name_en}
        </h3>
        <p className={styles.dishDescription}>
          {locale === "uk" ? dish.description_ua : dish.description_en}
        </p>

        <div className={styles.actions}>
          <Link href={`/admin/edit/${dish.id}`} className={styles.editBtn}>
            ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
          </Link>
          <button onClick={handleDelete} className={styles.deleteBtn}>
            üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
          </button>
        </div>
      </div>
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏
export default function Edit() {
  const [dishes, setDishes] = useState<Dish[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [searchQuery, setSearchQuery] = useState<string>("");

  const [page, setPage] = useState<number>(1);
  const [limit] = useState<number>(10);
  const [totalPages, setTotalPages] = useState<number>(1);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: —á–∏—Ç–∞–Ω–Ω—è –∑ localStorage –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è "all"
  const [category, setCategory] = useState<string>(() => {
    if (typeof window !== "undefined" && window.localStorage) {
      const savedCategory = localStorage.getItem(CATEGORY_STORAGE_KEY);
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —î –æ–¥–Ω—ñ—î—é –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
      const isCategoryValid = dishTypes.some(type => type.value === savedCategory);
      return isCategoryValid ? savedCategory! : "all";
    }
    return "all";
  });

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤ (–æ–±–≥–æ—Ä–Ω—É—Ç–∞ –≤ useCallback)
  const loadDishes = useCallback(
    async (query = "", pageNumber = 1, categoryValue = "all") => {
      setLoading(true);
      try {
        const response = await fetchDishesApi({
          query,
          page: pageNumber,
          limit,
          category: categoryValue !== "all" ? categoryValue : undefined,
        });

        setDishes(response.data);
        setTotalPages(Math.ceil(response.count / limit));
        setPage(response.page);
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç—Ä–∞–≤:", error);
      } finally {
        setLoading(false);
      }
    },
    [limit]
  );

  // useEffect: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  useEffect(() => {
    // –ü—Ä–∏ –∑–º—ñ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–∂–¥–∏ —Å–∫–∏–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
    loadDishes(searchQuery, 1, category);
  }, [category, loadDishes, searchQuery]); 

  // useEffect: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ localStorage
  useEffect(() => {
    if (typeof window !== "undefined" && window.localStorage) {
      localStorage.setItem(CATEGORY_STORAGE_KEY, category);
    }
  }, [category]); 

  const handleDelete = async (id: number) => {
    try {
      await deleteDishApi(id);
      setDishes((prev) => prev.filter((dish) => dish.id !== id));
      alert("‚úÖ –°—Ç—Ä–∞–≤—É –≤–∏–¥–∞–ª–µ–Ω–æ");
    } catch (error) {
      console.error(error);
      alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ");
    }
  };

  const handleToggleSelect = async (id: number, isSelected: boolean) => {
    try {
      const updatedDish = isSelected
        ? await unselectDishApi(id)
        : await selectDishApi(id);

      setDishes((prevDishes) =>
        prevDishes.map((dish) =>
          dish.id === id ? { ...dish, is_selected: updatedDish.is_selected } : dish
        )
      );
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –≤–∏–±—Ä–∞–Ω–æ—ó —Å—Ç—Ä–∞–≤–∏:", error);
      alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É");
    }
  };

  const handleCategoryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    // –ü—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω category. 
    // loadDishes –≤–∏–∫–ª–∏—á–µ—Ç—å—Å—è –≤ useEffect, —Å–∫–∏–Ω—É–≤—à–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –Ω–∞ 1.
    setCategory(e.target.value);
  };

  const handleSearch = () => {
    // –ü—Ä–∏ –ø–æ—à—É–∫—É, –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    loadDishes(searchQuery, 1, category); 
  };

  const handleClearSearch = () => {
    setSearchQuery("");
    // –ü—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ø–æ—à—É–∫—É, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–Ω–æ–≤—É –∑ –ø–æ—Ç–æ—á–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é —ñ –∑ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    loadDishes("", 1, category);
  };

  const handlePrevPage = () => {
    if (page > 1) loadDishes(searchQuery, page - 1, category);
  };

  const handleNextPage = () => {
    if (page < totalPages) loadDishes(searchQuery, page + 1, category);
  };

  return (
    <div className={styles.page}>
      <main className={styles.main}>
        {/* --- –§—ñ–ª—å—Ç—Ä –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ --- */}
        <div className={styles.filterContainer}>
          <select
            value={category}
            onChange={handleCategoryChange}
            className={styles.categorySelect}
          >
            {dishTypes.map((type) => (
              <option key={type.value} value={type.value}>
                {type.label}
              </option>
            ))}
          </select>
        </div>

        {/* --- –ü–æ—à—É–∫ --- */}
        <div className={styles.searchContainer}>
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏..."
            className={styles.searchInput}
          />
          <button onClick={handleSearch} className={styles.searchBtn}>
            üîç –ü–æ—à—É–∫
          </button>
          {searchQuery && (
            <button onClick={handleClearSearch} className={styles.clearBtn}>
              ‚ùå
            </button>
          )}
        </div>

        <div className={styles.dishList}>
          {loading ? (
            <p className={styles.loadingMessage}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤...</p>
          ) : dishes.length > 0 ? (
            dishes.map((dish) => (
              <DishCard
                key={dish.id}
                dish={dish}
                onDelete={handleDelete}
                onToggleSelect={handleToggleSelect}
              />
            ))
          ) : (
            <p className={styles.errorMessage}>–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç—Ä–∞–≤.</p>
          )}
        </div>

        {/* --- –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è --- */}
        {totalPages > 1 && (
          <div className={styles.pagination}>
            <button onClick={handlePrevPage} disabled={page === 1}>
              ‚óÄÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è
            </button>
            <span>
              {page} / {totalPages}
            </span>
            <button onClick={handleNextPage} disabled={page === totalPages}>
              –ù–∞—Å—Ç—É–ø–Ω–∞ ‚ñ∂Ô∏è
            </button>
          </div>
        )}
      </main>
    </div>
  );
}