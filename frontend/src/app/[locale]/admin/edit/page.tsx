// src/app/admin/edit/page.tsx

"use client";

import React, { useState, useEffect } from "react";
import styles from "./page.module.scss";
import { useTranslations, useLocale } from "next-intl";
import {
  fetchDishesApi,
  deleteDishApi,
  selectDishApi,
  unselectDishApi,
  // searchDishesApi // ‚ùå –í–∏–¥–∞–ª–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –ª–æ–≥—ñ–∫–∞ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —É fetchDishesApi
} from "@/api/dishesApi";
import { Dish } from "@/types/dish";
import Link from "next/link";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–¥–Ω—ñ—î—ó —Å—Ç—Ä–∞–≤–∏
const DishCard = ({
  dish,
  onDelete,
  onToggleSelect,
}: {
  dish: Dish;
  onDelete: (id: number) => void;
  onToggleSelect: (id: number, isSelected: boolean) => void;
}) => {
  const locale = useLocale();

  const handleDelete = async () => {
    if (
      confirm(
        `–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É "${locale === "uk" ? dish.name_ua : dish.name_en}"?`
      )
    ) {
      await onDelete(dish.id);
    }
  };

  const handleToggleSelect = () => {
    onToggleSelect(dish.id, dish.is_selected);
  };

  return (
    <div className={styles.dishCard}>
      <button
        className={`${styles.selectStar} ${dish.is_selected ? styles.selected : ""}`}
        onClick={handleToggleSelect}
      >
        ‚òÖ
      </button>

      <img src={dish.photo} alt={dish.name_ua} className={styles.dishPhoto} />
      <div className={styles.dishInfo}>
        <h3 className={styles.dishTitle}>
          {locale === "uk" ? dish.name_ua : dish.name_en}
        </h3>
        <p className={styles.dishDescription}>
          {locale === "uk" ? dish.description_ua : dish.description_en}
        </p>

        <div className={styles.actions}>
          <Link href={`/admin/edit/${dish.id}`} className={styles.editBtn}>
            ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
          </Link>
          <button onClick={handleDelete} className={styles.deleteBtn}>
            üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
          </button>
        </div>
      </div>
    </div>
  );
};

export default function Edit() {
  const [dishes, setDishes] = useState<Dish[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [searchQuery, setSearchQuery] = useState<string>("");

  // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–ª—è—î PaginatedDishesResponse
  const loadDishes = async (query = "") => {
    setLoading(true);
    try {
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π fetchDishesApi –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ—à—É–∫—É
      const response = await fetchDishesApi({ query }); 
      
      // ‚úÖ –ö–õ–Æ–ß–û–í–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ë–µ—Ä–µ–º–æ –º–∞—Å–∏–≤ —Å—Ç—Ä–∞–≤ –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ 'data'
      setDishes(response.data); 
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç—Ä–∞–≤:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadDishes();
  }, []);

  const handleDelete = async (id: number) => {
    try {
      await deleteDishApi(id);
      setDishes((prev) => prev.filter((dish) => dish.id !== id));
      alert("‚úÖ –°—Ç—Ä–∞–≤—É –≤–∏–¥–∞–ª–µ–Ω–æ");
    } catch (error) {
      console.error(error);
      alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ");
    }
  };

  const handleToggleSelect = async (id: number, isSelected: boolean) => {
    try {
      const updatedDish = isSelected
        ? await unselectDishApi(id)
        : await selectDishApi(id);

      setDishes((prevDishes) =>
        prevDishes.map((dish) =>
          dish.id === id ? { ...dish, is_selected: updatedDish.is_selected } : dish
        )
      );
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –≤–∏–±—Ä–∞–Ω–æ—ó —Å—Ç—Ä–∞–≤–∏:", error);
      alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É");
    }
  };

  // ‚úÖ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ—à—É–∫—É
  const handleSearch = () => {
    loadDishes(searchQuery);
  };
  
  // ‚úÖ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–æ—à—É–∫—É
  const handleClearSearch = () => {
    setSearchQuery('');
    loadDishes();
  };


  return (
    <div className={styles.page}>
      <main className={styles.main}>
        <h1 className={styles.title}></h1>
        <p className={styles.description}></p>

        {/* ‚úÖ –ë–ª–æ–∫ –ø–æ—à—É–∫—É */}
        <div className={styles.searchContainer}>
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏..."
            className={styles.searchInput}
          />
          <button onClick={handleSearch} className={styles.searchBtn}>
            üîç –ü–æ—à—É–∫
          </button>
            {searchQuery && (
            <button onClick={handleClearSearch} className={styles.clearBtn}>
              ‚ùå
            </button>
          )}
        </div>
        
        <div className={styles.dishList}>
          {loading ? (
            <p className={styles.loadingMessage}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤...</p>
          ) : dishes.length > 0 ? (
            dishes.map((dish) => (
              <DishCard
                key={dish.id}
                dish={dish}
                onDelete={handleDelete}
                onToggleSelect={handleToggleSelect}
              />
            ))
          ) : (
            <p className={styles.errorMessage}>–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç—Ä–∞–≤.</p>
          )}
        </div>
      </main>
    </div>
  );
}