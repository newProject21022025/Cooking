// src/components/partners/PartnerProfileForm.tsx

import { Formik, Form, Field, ErrorMessage, FormikHelpers } from "formik";
import * as Yup from "yup";
import { UpdatePartnerProfileData } from "@/types/partner";
import { formatPhoneNumber } from "./formatters";
import styles from "@/app/[locale]/partners/personal/page.module.scss";
import { useState } from "react";
import { changePartnerPassword } from "@/api/partnersApi"; // –Ω–æ–≤–∏–π API –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
import { uploadToCloudinary } from "@/api/cloudinaryApi";

const validationSchema = Yup.object({
  firstName: Yup.string()
    .required("–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .max(50, "–Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ"),
  lastName: Yup.string()
    .required("–ü—Ä—ñ–∑–≤–∏—â–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .max(50, "–ü—Ä—ñ–∑–≤–∏—â–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ"),
  phoneNumber: Yup.string()
    .test("isValidPhoneNumber", "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É", (value) => {
      if (!value) return true;
      const cleaned = value.replace(/\D/g, "");
      return cleaned.length >= 10 && cleaned.length <= 15;
    })
    .nullable(),
  deliveryAddress: Yup.string().max(200, "–ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞").nullable(),
  description: Yup.string().max(500, "–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π").nullable(),
});

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
const passwordValidationSchema = Yup.object({
  currentPassword: Yup.string().required("–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  newPassword: Yup.string()
    .min(5, "–ú—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤")
    .required("–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref("newPassword")], "–ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è")
    .required("–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"),
});

interface PartnerProfileFormProps {
  initialValues: UpdatePartnerProfileData;
  onSubmit: (
    values: UpdatePartnerProfileData,
    helpers: FormikHelpers<UpdatePartnerProfileData>
  ) => void;
  onCancel: () => void;
}

export default function PartnerProfileForm({
  initialValues,
  onSubmit,
  onCancel,
}: PartnerProfileFormProps) {
  const [avatarFile, setAvatarFile] = useState<File | null>(null);
  const [avatarPreview, setAvatarPreview] = useState<string | null>(null);

  // !!! –î–û–î–ê–Ñ–ú–û –°–¢–ê–ù –î–õ–Ø –§–û–¢–û !!!
  const [photoFile, setPhotoFile] = useState<File | null>(null);
  const [photoPreview, setPhotoPreview] = useState<string | null>(null);

  const [passwordSuccess, setPasswordSuccess] = useState(false);
  const [passwordError, setPasswordError] = useState<string | null>(null);

  const handleAvatarChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    setAvatarFile(file);
    const reader = new FileReader();
    reader.onload = (e) => setAvatarPreview(e.target?.result as string);
    reader.readAsDataURL(file);
  };

  // !!! –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –§–û–¢–û !!!
  const handlePhotoChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    setPhotoFile(file);
    const reader = new FileReader();
    reader.onload = (e) => setPhotoPreview(e.target?.result as string);
    reader.readAsDataURL(file);
  };

  const handlePasswordChange = async (
    values: {
      currentPassword: string;
      newPassword: string;
      confirmPassword: string;
    },
    helpers: FormikHelpers<{
      currentPassword: string;
      newPassword: string;
      confirmPassword: string;
    }>
  ) => {
    try {
      setPasswordError(null);
      setPasswordSuccess(false);

      // üí° –û—Ç—Ä–∏–º–∞–π—Ç–µ id –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, –≤—ñ–Ω —î –≤ initialValues.
      const partnerId = initialValues.id;
      if (!partnerId) {
        throw new Error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞.");
      }

      await changePartnerPassword(
        partnerId,
        values.currentPassword,
        values.newPassword
      );
      setPasswordSuccess(true);
      helpers.resetForm();
      setTimeout(() => setPasswordSuccess(false), 3000);
    } catch (err: unknown) {
      const e = err as { message?: string };
      setPasswordError(e.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è");
    } finally {
      helpers.setSubmitting(false);
    }
  };

  return (
    <div>
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={async (values, helpers) => {
          // !!! –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ù–ê CLOUDINARY –ü–ï–†–ï–î –í–Ü–î–ü–†–ê–í–ö–û–Æ –ù–ê BACKEND !!!

          try {
            // 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ê–≤–∞—Ç–∞—Ä–∞
            if (avatarFile) {
              const result = await uploadToCloudinary(avatarFile);
              // –ó–∞–º—ñ–Ω—é—î–º–æ –æ–±'—î–∫—Ç File –Ω–∞ URL-–∞–¥—Ä–µ—Å—É –≤ –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏
              values.avatar = result.secure_url;
            } else if (values.avatar === "") {
              // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–∏–≤ –∞–≤–∞—Ç–∞—Ä, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ null (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ API)
              values.avatar = null;
            }

            // 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –§–æ—Ç–æ
            if (photoFile) {
              const result = await uploadToCloudinary(photoFile);
              // –ó–∞–º—ñ–Ω—é—î–º–æ –æ–±'—î–∫—Ç File –Ω–∞ URL-–∞–¥—Ä–µ—Å—É –≤ –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏
              values.photo = result.secure_url;
            } else if (values.photo === "") {
              // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–∏–≤ —Ñ–æ—Ç–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ null
              values.photo = null;
            }

            // 3. –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π onSubmit (handleUpdateProfile), —è–∫–∏–π –æ—á—ñ–∫—É—î URL-–∞–¥—Ä–µ—Å–∏
            onSubmit(values, helpers);
          } catch (e) {
            helpers.setStatus({
              error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            });
            console.error(e);
            helpers.setSubmitting(false);
          }
        }}
        enableReinitialize
      >
        {({ isSubmitting, dirty, setFieldValue, values }) => (
          <Form className={styles.form}>
            {/* –ê–≤–∞—Ç–∞—Ä (–æ–Ω–æ–≤–ª–µ–Ω–∏–π –±–ª–æ–∫) */}
            <div className={styles.avatarSection}>
              <div className={styles.avatarContainer}>
                {avatarPreview ? (
                  <img
                    src={avatarPreview}
                    alt="–ù–æ–≤–∏–π –∞–≤–∞—Ç–∞—Ä"
                    className={styles.avatar}
                  />
                ) : initialValues.avatar ? (
                  <img
                    src={initialValues.avatar}
                    alt="–ê–≤–∞—Ç–∞—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
                    className={styles.avatar}
                  />
                ) : (
                  <div className={styles.placeholderAvatar}>
                    {values.firstName?.charAt(0)}
                    {values.lastName?.charAt(0)}
                  </div>
                )}
              </div>
              <div className={styles.avatarUpload}>
                <input
                  type="file"
                  accept="image/*"
                  onChange={(e) => {
                    handleAvatarChange(e);
                    // –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–±'—î–∫—Ç File —É Formik –ª–∏—à–µ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è 'dirty' —ñ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
                    if (e.target.files?.[0]) {
                      setFieldValue("avatar", e.target.files[0]);
                    }
                  }}
                />
                {avatarFile && <span>{avatarFile.name}</span>}
              </div>
            </div>
            {/* –§–æ—Ç–æ (–æ–Ω–æ–≤–ª–µ–Ω–∏–π –±–ª–æ–∫) */}
            <div className={styles.photoSection}>
              <div className={styles.photoContainer}>
                {photoPreview ? ( // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω photoPreview
                  <img
                    src={photoPreview}
                    alt="–ù–æ–≤–µ —Ñ–æ—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
                    className={styles.photo}
                  />
                ) : initialValues.photo ? (
                  <img
                    src={initialValues.photo}
                    alt="–§–æ—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
                    className={styles.photo}
                  />
                ) : (
                  <div className={styles.placeholderAvatar}>
                    {values.firstName?.charAt(0)}
                    {values.lastName?.charAt(0)}
                  </div>
                )}
              </div>
              <div className={styles.photoUpload}>
                <input
                  type="file"
                  accept="image/*"
                  onChange={(e) => {
                    handlePhotoChange(e); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
                    const file = e.target.files?.[0];
                    if (file) {
                      setFieldValue("photo", file);
                    }
                  }}
                />
                {photoFile && <span>{photoFile.name}</span>}
              </div>
            </div>
            {/* –ü–æ–ª—è –ø—Ä–æ—Ñ—ñ–ª—é */}
            <div className={styles.formGroup}>
              <label>–Ü–º&apos;—è</label>
              <Field
                name="firstName"
                placeholder="–Ü–º'—è"
                className={styles.input}
              />
              <ErrorMessage
                name="firstName"
                component="div"
                className={styles.errorText}
              />
            </div>

            <div className={styles.formGroup}>
              <label>–ü—Ä—ñ–∑–≤–∏—â–µ</label>
              <Field
                name="lastName"
                placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ"
                className={styles.input}
              />
              <ErrorMessage
                name="lastName"
                component="div"
                className={styles.errorText}
              />
            </div>

            <div className={styles.formGroup}>
              <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
              <Field
                type="tel"
                name="phoneNumber"
                placeholder="+380 (XX) XXX-XX-XX"
                className={styles.input}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                  setFieldValue(
                    "phoneNumber",
                    formatPhoneNumber(e.target.value)
                  );
                }}
                value={values.phoneNumber || ""}
              />
              <ErrorMessage
                name="phoneNumber"
                component="div"
                className={styles.errorText}
              />
            </div>

            <div className={styles.formGroup}>
              <label>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</label>
              <Field
                name="deliveryAddress"
                as="textarea"
                className={styles.textarea}
              />
              <ErrorMessage
                name="deliveryAddress"
                component="div"
                className={styles.errorText}
              />
            </div>

            <div className={styles.formGroup}>
              <label>–û–ø–∏—Å –ø—Ä–æ —Å–µ–±–µ</label>
              <Field
                name="description"
                as="textarea"
                className={styles.textarea}
              />
              <ErrorMessage
                name="description"
                component="div"
                className={styles.errorText}
              />
            </div>

            <div className={styles.buttonGroup}>
              <button
                type="submit"
                className={styles.saveButton}
                disabled={isSubmitting || !dirty}
              >
                –ó–±–µ—Ä–µ–≥—Ç–∏
              </button>
              <button
                type="button"
                className={styles.cancelButton}
                onClick={onCancel}
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </button>
            </div>
          </Form>
        )}
      </Formik>

      {/* –§–æ—Ä–º–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è */}
      <div className={styles.passwordCard}>
        <h2>–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å</h2>
        {passwordSuccess && (
          <div className={styles.success}>–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!</div>
        )}
        {passwordError && <div className={styles.error}>{passwordError}</div>}

        <Formik
          initialValues={{
            currentPassword: "",
            newPassword: "",
            confirmPassword: "",
          }}
          validationSchema={passwordValidationSchema}
          onSubmit={handlePasswordChange}
        >
          {({ isSubmitting }) => (
            <Form className={styles.form}>
              <div className={styles.formGroup}>
                <label>–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å</label>
                <Field
                  type="password"
                  name="currentPassword"
                  className={styles.input}
                />
                <ErrorMessage
                  name="currentPassword"
                  component="div"
                  className={styles.errorText}
                />
              </div>

              <div className={styles.formGroup}>
                <label>–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å</label>
                <Field
                  type="password"
                  name="newPassword"
                  className={styles.input}
                />
                <ErrorMessage
                  name="newPassword"
                  component="div"
                  className={styles.errorText}
                />
              </div>

              <div className={styles.formGroup}>
                <label>–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å</label>
                <Field
                  type="password"
                  name="confirmPassword"
                  className={styles.input}
                />
                <ErrorMessage
                  name="confirmPassword"
                  component="div"
                  className={styles.errorText}
                />
              </div>

              <button
                type="submit"
                className={styles.saveButton}
                disabled={isSubmitting}
              >
                {isSubmitting ? "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è..." : "–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å"}
              </button>
            </Form>
          )}
        </Formik>
      </div>
    </div>
  );
}
