// src/components/createDishForm/CreateDishForm.tsx
"use client";

import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import styles from "./CreateDishForm.module.scss";
import IngredientsTable from "./constants/IngredientsTable";
import { Dish, CreateDishDto } from "@/types/dish";
import { ingredientsByCategory } from "./constants/ingredientsData";

// üëá –î–æ–¥–∞—î–º–æ –¥–æ–ø–æ–º—ñ–∂–Ω–∏–π —Ç–∏–ø –¥–ª—è —Ñ–æ—Ä–º–∏ (–±–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ category)
export interface IngredientForm {
  name_ua: string;
  name_en: string;
  quantity?: number;
  unit: string;
  category: string; // main | optional | —ñ–Ω—à—ñ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
}

interface FormValues extends Omit<CreateDishDto, "standard_servings"> {
  important_ingredients: IngredientForm[];
  optional_ingredients: IngredientForm[];
}

interface CreateDishFormProps {
  initialData?: Partial<Dish>; // –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  onSubmit: (values: FormValues) => Promise<void>; // –æ–±—Ä–æ–±–Ω–∏–∫ submit
}

const validationSchema = Yup.object({
  name_ua: Yup.string().required("–û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
  name_en: Yup.string().required("Required"),
  type: Yup.string().required("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å—Ç—Ä–∞–≤–∏"),
  description_ua: Yup.string().required("–û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
  description_en: Yup.string().required("Required"),
  photo: Yup.string().url("–ú–∞—î –±—É—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è").required("–û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
  recipe_ua: Yup.string().required("–û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
  recipe_en: Yup.string().required("Required"),
});

const dishTypes = [
  { value: "first_course", label: "ü•ò –ü–µ—Ä—à–µ –±–ª—é–¥–æ / First course" },
  { value: "side_dish", label: "üçö –ì–∞—Ä–Ω—ñ—Ä / Side dish" },
  { value: "salad", label: "ü•ó –°–∞–ª–∞—Ç / Salad" },
  { value: "appetizer", label: "üç¢ –ó–∞–∫—É—Å–∫–∞ / Appetizer" },
];

export default function CreateDishForm({ initialData, onSubmit }: CreateDishFormProps) {
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞ –ø–æ –Ω–∞–∑–≤—ñ
  const mapIngredientWithCategory = (ing: any, defaultCategory: string): IngredientForm => {
    const foundCategory = Object.keys(ingredientsByCategory).find((cat) =>
      ingredientsByCategory[cat].some((item) => item.name_ua === ing.name_ua)
    );
    return {
      ...ing,
      category: foundCategory || defaultCategory,
    };
  };

  return (
    <div className={styles.formWrapper}>
      <h2 className={styles.title}>
        {initialData ? "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É" : "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É"}
      </h2>
      <Formik<FormValues>
        initialValues={{
          name_ua: initialData?.name_ua || "",
          name_en: initialData?.name_en || "",
          type: initialData?.type || "",
          description_ua: initialData?.description_ua || "",
          description_en: initialData?.description_en || "",
          photo: initialData?.photo || "",
          important_ingredients: (initialData?.important_ingredients || []).map((ing) =>
            mapIngredientWithCategory(ing, "main")
          ),
          optional_ingredients: (initialData?.optional_ingredients || []).map((ing) =>
            mapIngredientWithCategory(ing, "optional")
          ),
          recipe_ua: initialData?.recipe_ua || "",
          recipe_en: initialData?.recipe_en || "",
        }}
        validationSchema={validationSchema}
        onSubmit={onSubmit}
      >
        {() => (
          <Form className={styles.form}>
            {/* –ù–∞–∑–≤–∏ */}
            <div className={styles.field}>
              <label>–ù–∞–∑–≤–∞ (UA)</label>
              <Field name="name_ua" placeholder="–ë–æ—Ä—â" />
              <ErrorMessage name="name_ua" component="div" className={styles.error} />
            </div>

            <div className={styles.field}>
              <label>Name (EN)</label>
              <Field name="name_en" placeholder="Borscht" />
              <ErrorMessage name="name_en" component="div" className={styles.error} />
            </div>

            {/* –¢–∏–ø —Å—Ç—Ä–∞–≤–∏ */}
            <div className={styles.field}>
              <label>–¢–∏–ø —Å—Ç—Ä–∞–≤–∏</label>
              <Field as="select" name="type">
                <option value="">-- –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø --</option>
                {dishTypes.map((t) => (
                  <option key={t.value} value={t.value}>
                    {t.label}
                  </option>
                ))}
              </Field>
              <ErrorMessage name="type" component="div" className={styles.error} />
            </div>

            {/* –û–ø–∏—Å */}
            <div className={styles.field}>
              <label>–û–ø–∏—Å (UA)</label>
              <Field as="textarea" name="description_ua" />
            </div>
            <div className={styles.field}>
              <label>Description (EN)</label>
              <Field as="textarea" name="description_en" />
            </div>

            {/* –§–æ—Ç–æ */}
            <div className={styles.field}>
              <label>–§–æ—Ç–æ (URL)</label>
              <Field name="photo" placeholder="https://example.com/image.jpg" />
            </div>

            {/* –û—Å–Ω–æ–≤–Ω—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ */}
            <IngredientsTable
              name="important_ingredients"
              label="–û—Å–Ω–æ–≤–Ω—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏"
              type="main"
            />

            {/* –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ */}
            <IngredientsTable
              name="optional_ingredients"
              label="–ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏"
              type="optional"
            />

            {/* –†–µ—Ü–µ–ø—Ç */}
            <div className={styles.field}>
              <label>–†–µ—Ü–µ–ø—Ç (UA)</label>
              <Field as="textarea" name="recipe_ua" />
            </div>
            <div className={styles.field}>
              <label>Recipe (EN)</label>
              <Field as="textarea" name="recipe_en" />
            </div>

            <button type="submit" className={styles.submitBtn}>
              ‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏
            </button>
          </Form>
        )}
      </Formik>
    </div>
  );
}
