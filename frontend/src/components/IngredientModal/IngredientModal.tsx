// src/components/IngredientModal/IngredientModal.tsx
import React from "react";
import IngredientCircle from "../ingredientCircle/IngredientCircle";
import styles from "./IngredientModal.module.scss";
import { Ingredient as FullIngredient } from "@/types/ingredients";
import { useLocale } from "next-intl";

interface IngredientModalProps {
  ingredient: FullIngredient | null;
  onClose: () => void;
}

const IngredientModal: React.FC<IngredientModalProps> = ({ ingredient, onClose }) => {
  const locale = useLocale();

  if (!ingredient) {
    return null;
  }
  
  // üî• –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –û–ß–ò–©–ï–ù–ù–Ø –†–Ø–î–ö–ê –í–Ü–î **
  const cleanText = (text: string) => text.replace(/\*\*/g, "");

  const getCircleProps = (ing: FullIngredient) => {
    
    // 1. –û–ß–ò–©–ï–ù–ù–Ø –ù–ê–ó–í–ò
    const rawName = locale === "uk" ? ing.name_uk : ing.name_en;

    return {
      name: cleanText(rawName), // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—á–∏—â–µ–Ω—É –Ω–∞–∑–≤—É
      image: ing.image,
      
      // 2. –û–ß–ò–©–ï–ù–ù–Ø –¢–ï–ö–°–¢–Ü–í –ü–ï–†–ï–í–ê–ì
      benefits: ing.benefits.map((b) => {
        const rawBenefitText = locale === "uk" ? b.text_uk : b.text_en;
        return {
            // üî• –û–ß–ò–©–£–Ñ–ú–û –ö–û–ñ–ï–ù –¢–ï–ö–°–¢ –ü–ï–†–ï–í–ê–ì–ò
            text: cleanText(rawBenefitText), 
        };
      }),
    };
  };

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
        <IngredientCircle
          {...getCircleProps(ingredient)}
          onClose={onClose}
        />
      </div>
    </div>
  );
};

export default IngredientModal;