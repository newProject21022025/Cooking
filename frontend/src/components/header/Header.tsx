// src/components/header/Header.tsx

"use client";

import { useSelector, useDispatch } from "react-redux";
import { useState, useEffect } from "react";
import { RootState } from "@/redux/store";
import Link from "next/link";
import { usePathname, useRouter } from "@/i18n/navigation";
import { logout } from "@/redux/slices/authSlice";
import type { AppDispatch } from "@/redux/store";
import styles from "./Header.module.scss";
import Logo from "@/svg/Logo/Logo";

type HeaderProps = { locale: "uk" | "en" };

export default function Header({ locale }: HeaderProps) {
  const [mounted, setMounted] = useState(false);
  const [scrolled, setScrolled] = useState(false);

  const pathname = usePathname();
  const router = useRouter();
  const dispatch = useDispatch<AppDispatch>(); // üí° –í–ò–ü–†–ê–í–õ–ï–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ –ª–∏—à–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–∑ authSlice)

  const { token } = useSelector((state: RootState) => state.auth);
  const isAuthenticated = !!token; // üí° –í–ò–ü–†–ê–í–õ–ï–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¥–ª—è —Ä–æ–ª—ñ) –∑ userSlice

  const { data: profileUser } = useSelector((state: RootState) => state.user);
  const role = profileUser?.role?.toLowerCase();

  useEffect(() => {
    setMounted(true);

    const handleScroll = () => setScrolled(window.scrollY > 10);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []); // –û—á—ñ–∫—É—î–º–æ mounted –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º –≤–º—ñ—Å—Ç—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ –≥—ñ–¥—Ä–∞—Ç–∞—Ü—ñ—ó

  if (!mounted) return <header className={styles.header} />;

  const handleLogout = () => {
    dispatch(logout());
    router.push("/login");
  };

  const changeLanguage = (newLocale: string) => {
    const currentPathWithoutLocale = pathname.replace(`/${locale}`, "");
    window.location.href = `/${newLocale}${currentPathWithoutLocale}`;
  };

  return (
    <header className={`${styles.header} ${scrolled ? styles.scrolled : ""}`}>
      {" "}
      <Link className={styles.menu} href="/menu">
        –ú–µ–Ω—é{" "}
      </Link>{" "}
      <div className={styles.logo}>
        {" "}
        <Link href="/">
          <Logo />{" "}
        </Link>{" "}
      </div>{" "}
      <nav className={styles.navigation}>
        {" "}
        {!isAuthenticated ? (
          <Link href="/login" className={styles.navLink}>
            –£–≤—ñ–π—Ç–∏{" "}
          </Link>
        ) : (
          <>
            {" "}
            {/* –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ role –∑ profileUser (state.user) */}{" "}
            {role === "admin" && (
              <>
                {" "}
                <Link href="/profile" className={styles.navLink}>
                  –ü—Ä–æ—Ñ—ñ–ª—å{" "}
                </Link>{" "}
                <Link href="/admin" className={styles.navLink}>
                  –ê–¥–º—ñ–Ω{" "}
                </Link>{" "}
              </>
            )}{" "}
            {role === "user" && (
              <Link href="/profile" className={styles.navLink}>
                –ü—Ä–æ—Ñ—ñ–ª—å{" "}
              </Link>
            )}{" "}
            {role === "partner" && (
              <Link href="/partners" className={styles.navLink}>
                –ü–∞—Ä—Ç–Ω–µ—Ä–∏{" "}
              </Link>
            )}{" "}
            {/* –ö–Ω–æ–ø–∫–∞ –í–∏–π—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è, —è–∫—â–æ isAuthenticated = true (—Ç–æ–±—Ç–æ —î —Ç–æ–∫–µ–Ω) */}{" "}
            <button onClick={handleLogout} className={styles.navLink}>
              –í–∏–π—Ç–∏{" "}
            </button>{" "}
          </>
        )}{" "}
        <div className={styles.languageSwitcher}>
          {" "}
          <button
            onClick={() => changeLanguage("en")}
            className={`${styles.languageButton} ${
              locale === "en" ? styles.active : ""
            }`}
          >
            EN{" "}
          </button>
          <span className={styles.languageSeparator}>|</span>{" "}
          <button
            onClick={() => changeLanguage("uk")}
            className={`${styles.languageButton} ${
              locale === "uk" ? styles.active : ""
            }`}
          >
            UK{" "}
          </button>{" "}
        </div>{" "}
      </nav>{" "}
    </header>
  );
}
