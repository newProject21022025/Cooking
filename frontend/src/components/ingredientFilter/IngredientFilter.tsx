// src/components/IngredientFilter/IngredientFilter.tsx

"use client";

import React, { useState, useEffect, useCallback } from "react";
import styles from "./IngredientFilter.module.scss";
import { useLocale } from "next-intl";
import { useSearchParams } from "next/navigation"; 
import {
  mainCategories,
  ingredientsByCategory,
} from "@/components/createDishForm/constants/ingredientsData";
import { 
  fetchDishesApi,
} from "@/api/dishesApi";
import { 
  Dish, 
  Ingredient, 
  PaginatedDishesResponse 
} from "@/types/dish"; // ‚úÖ –Ü–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
import DishCard from "@/components/dishCard/DishCard";

interface IngredientOption {
  name_ua: string;
  name_en: string;
}

const DISHES_PER_PAGE = 10; // ‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏

// dishTypes –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∫–Ω–æ–ø–æ–∫
const dishTypes = [
  { value: "all", label: "üçΩÔ∏è –í—Å—ñ —Å—Ç—Ä–∞–≤–∏ / All dishes" },
  { value: "soup", label: "üç≤ –°—É–ø / Soup" },
  { value: "main_course", label: "ü•© –û—Å–Ω–æ–≤–Ω–µ –±–ª—é–¥–æ / Main course" },
  { value: "side_dish", label: "üçö –ì–∞—Ä–Ω—ñ—Ä / Side dish" },
  { value: "salad", label: "ü•ó –°–∞–ª–∞—Ç / Salad" },
  { value: "appetizer", label: "üç¢ –ó–∞–∫—É—Å–∫–∞ / Appetizer" },
];

export default function IngredientFilter() {
  const [selectedIngredients, setSelectedIngredients] = useState<string[]>([]);
  
  // ‚úÖ –ù–æ–≤—ñ —Å—Ç–∞–Ω–∏ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó –ø–∞–≥—ñ–Ω–æ–≤–∞–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  const [paginatedResponse, setPaginatedResponse] = useState<PaginatedDishesResponse>({
    data: [],
    count: 0,
    page: 1,
    limit: DISHES_PER_PAGE,
  });

  const dishes = paginatedResponse.data; // –í–∏—Ç—è–≥—É—î–º–æ —Å—Ç—Ä–∞–≤–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

  const [loading, setLoading] = useState<boolean>(true);
  const locale = useLocale();

  const searchParams = useSearchParams(); 
  
  const [searchQuery, setSearchQuery] = useState("");
  const [submittedSearchQuery, setSubmittedSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all"); 

  const [openCategory, setOpenCategory] = useState<string | null>(null);

  // ‚úÖ 1. –ï—Ñ–µ–∫—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ URL (—Ç–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)
  useEffect(() => {
    const categoryFromUrl = searchParams.get("category") || "all";
    setSelectedCategory(categoryFromUrl);

    // –°–∫–∏–¥–∞—î–º–æ —ñ–Ω—à—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
    setSelectedIngredients([]);
    setSubmittedSearchQuery("");
    setSearchQuery("");
    setCurrentPage(1); // ‚úÖ –°–∫–∏–¥–∞—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ URL
  }, [searchParams]); 

  
  // ‚úÖ 2. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Å—Ç—Ä–∞–≤ (–ë–µ–∫–µ–Ω–¥ + –ö–ª—ñ—î–Ω—Ç)
  const getDishes = useCallback(async () => {
    setLoading(true);
    
    // ‚úÖ –ù–û–í–ï: –î–æ–¥–∞—î–º–æ Category —Ç–∞ Ingredients –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    const backendParams = {
      page: currentPage,
      limit: DISHES_PER_PAGE,
      query: submittedSearchQuery,
      // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ç–∏–ø–æ–º —Å—Ç—Ä–∞–≤–∏ ('all' = undefined –¥–ª—è –±–µ–∫–µ–Ω–¥—É)
      category: selectedCategory !== "all" ? selectedCategory : undefined, 
      ingredients: selectedIngredients.length > 0 ? selectedIngredients : undefined, // –î–æ–¥–∞—î–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
    };

    try {
      // üí° 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–µ–∫–µ–Ω–¥—É (–∑ –£–°–Ü–ú–ê —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏)
      const response = await fetchDishesApi(backendParams);

      // ‚ùå –í–ò–î–ê–õ–Ø–Ñ–ú–û: –ö–õ–Ü–Ñ–ù–¢–°–¨–ö–£ –§–Ü–õ–¨–¢–†–ê–¶–Ü–Æ –ó–ê –ö–ê–¢–ï–ì–û–†–Ü–Ñ–Æ
      /* if (selectedCategory !== "all") {
          filteredDishes = filteredDishes.filter(
              (dish) => dish.type === selectedCategory
          );
      }
      */
      
      // ‚ùå –í–ò–î–ê–õ–Ø–Ñ–ú–û: –ö–õ–Ü–Ñ–ù–¢–°–¨–ö–£ –§–Ü–õ–¨–¢–†–ê–¶–Ü–Æ –ó–ê –Ü–ù–ì–†–ï–î–Ü–Ñ–ù–¢–ê–ú–ò
      /*
      if (selectedIngredients.length > 0) {
        // ... (–≤—Å—è –ª–æ–≥—ñ–∫–∞ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó)
        totalCount = filteredDishes.length; 
      }
      */
      
      // ‚úÖ 2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ count, —è–∫—ñ –ø–æ–≤–µ—Ä–Ω—É–≤ –±–µ–∫–µ–Ω–¥ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
      const totalCount = response.count;
      
      // üí° 3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
      setPaginatedResponse(response); // –í—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∂–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∞
      setTotalPages(Math.ceil(totalCount / DISHES_PER_PAGE));


    } catch (err) {
        // ...
    } finally {
        setLoading(false);
    }
}, [currentPage, submittedSearchQuery, selectedCategory, selectedIngredients]); 
  // ‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: –∑–º—ñ–Ω–∞ –±—É–¥—å-—è–∫–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä–∞ —á–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–∏–∫–ª–∏–∫–∞—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç

  // üí° 3. –í–∏–∫–ª–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É
  useEffect(() => {
    getDishes();
  }, [getDishes]);

  // ‚úÖ –§—É–Ω–∫—Ü—ñ—ó-–æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  const goToPage = (pageNumber: number) => {
    if (pageNumber >= 1 && pageNumber <= totalPages) {
      setCurrentPage(pageNumber);
    }
  };
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ (–∑ —Å–∫–∏–¥–∞–Ω–Ω—è–º –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)
  const handleCheckboxChange = (ingredientName: string) => {
    setSelectedIngredients((prev) =>
      prev.includes(ingredientName)
        ? prev.filter((i) => i !== ingredientName)
        : [...prev, ingredientName]
    );
    // ‚úÖ –°–∫–∏–¥–∞—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é —Ç–∞ –ø–æ—à—É–∫
    setSubmittedSearchQuery("");
    setSearchQuery("");
    setCurrentPage(1); 
  };

  const handleCategoryToggle = (category: string) => {
    setOpenCategory(openCategory === category ? null : category);
  };
  
  // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–º—ñ–Ω—é—î –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞–Ω (–∑ —Å–∫–∏–¥–∞–Ω–Ω—è–º –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)
  const handleCategoryChange = (categoryValue: string) => {
    setSelectedCategory(categoryValue); 
    // ‚úÖ –°–∫–∏–¥–∞—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
    setSubmittedSearchQuery("");
    setSearchQuery("");
    setCurrentPage(1); 
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É (–∑ —Å–∫–∏–¥–∞–Ω–Ω—è–º –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)
  const handleSearch = () => {
    setSubmittedSearchQuery(searchQuery);
    // ‚úÖ –°–∫–∏–¥–∞—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é —Ç–∞ —ñ–Ω—à—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
    setSelectedCategory("all");
    setSelectedIngredients([]);
    setCurrentPage(1); 
  };

  const filterClasses = styles.filterWrapper;

  return (
    <div className={styles.page}>
      {/* ... (–Ü–ù–ü–£–¢ –ü–û–®–£–ö–£ –¢–ê –ö–ù–û–ü–ö–ò –ö–ê–¢–ï–ì–û–†–Ü–ô –ó–ê–õ–ò–®–ê–Æ–¢–¨–°–Ø –ë–ï–ó –ó–ú–Ü–ù) ... */}
      <h2 className={styles.filterName}>–ü–æ—à—É–∫ —Å—Ç—Ä–∞–≤</h2>

      <div className={styles.searchContainer}>
        <input
          type="text"
          placeholder="–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é —Å—Ç—Ä–∞–≤–∏..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className={styles.searchBar}
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              handleSearch();
            }
          }}
        />
        <button onClick={handleSearch} className={styles.searchButton}>
          –ü–æ—à—É–∫
        </button>
      </div>

      <div className={styles.categoryButtonsContainer}>
        {dishTypes.map((type) => (
          <button
            key={type.value}
            onClick={() => handleCategoryChange(type.value)}
            className={`${styles.categoryButton} ${
              selectedCategory === type.value ? styles.active : ""
            }`}
          >
            {locale === "uk"
              ? type.label.split("/")[0].trim()
              : type.label.split("/")[1].trim()}
          </button>
        ))}
      </div>
      {/* ... (–§–Ü–õ–¨–¢–† –Ü–ù–ì–†–ï–î–Ü–Ñ–ù–¢–Ü–í –ó–ê–õ–ò–®–ê–Ñ–¢–¨–°–Ø –ë–ï–ó –ó–ú–Ü–ù) ... */}
      
      <div className={styles.filterHeader}>
        <h2 className={styles.filterName}>–§—ñ–ª—å—Ç—Ä –∑–∞ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞–º–∏</h2>
      </div>
      <div className={filterClasses}>
         <div className={styles.dropdownContainer}>
            {mainCategories.map((category) => (
                <div key={category} className={styles.dropdownWrapper}>
                    <button
                        className={styles.dropdownHeader}
                        onClick={() => handleCategoryToggle(category)}
                    >
                        {category}
                        <span
                            className={`${styles.arrow} ${
                                openCategory === category ? styles.arrowUp : ""
                            }`}
                        >
                            ‚ñº
                        </span>
                    </button>
                    <div
                        className={`${styles.dropdownContent} ${
                            openCategory === category ? styles.open : ""
                        }`}
                    >
                        {ingredientsByCategory[category].map(
                            (ingredient: IngredientOption) => (
                                <label
                                    key={ingredient.name_ua}
                                    className={styles.ingredientLabel}
                                >
                                    <input
                                        type="checkbox"
                                        value={ingredient.name_ua}
                                        checked={selectedIngredients.includes(
                                            ingredient.name_ua
                                        )}
                                        onChange={() =>
                                            handleCheckboxChange(ingredient.name_ua)
                                        }
                                    />
                                    {locale === "uk"
                                        ? ingredient.name_ua
                                        : ingredient.name_en}
                                </label>
                            )
                        )}
                    </div>
                </div>
            ))}
        </div>
      </div>
      
      
      <h3 className={styles.resultsHeader}>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó (–ó–Ω–∞–π–¥–µ–Ω–æ: {paginatedResponse.count})</h3>
      
      {loading ? (
        <p className={styles.filterText}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤...</p>
      ) : dishes.length > 0 ? (
        <>
          <div className={styles.dishList}>
            {dishes.map((dish) => (
              <DishCard key={dish.id} dish={dish} />
            ))}
          </div>

          {/* ‚úÖ –ë–õ–û–ö –ü–ê–ì–Ü–ù–ê–¶–Ü–á */}
          {totalPages > 1 && (
            <div className={styles.paginationControls}>
              <button 
                onClick={() => goToPage(currentPage - 1)} 
                disabled={currentPage === 1}
              >
                &lt; –ü–æ–ø–µ—Ä–µ–¥–Ω—è
              </button>
              
              {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (–ø—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç) */}
              {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNumber => (
                <button
                  key={pageNumber}
                  onClick={() => goToPage(pageNumber)}
                  className={pageNumber === currentPage ? styles.activePage : styles.pageButton}
                >
                  {pageNumber}
                </button>
              ))}

              <button 
                onClick={() => goToPage(currentPage + 1)} 
                disabled={currentPage === totalPages}
              >
                –ù–∞—Å—Ç—É–ø–Ω–∞ &gt;
              </button>
            </div>
          )}
        </>
      ) : (
        <p className={styles.noResults}>
          –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–≤ –∑–∞ –æ–±—Ä–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏
        </p>
      )}
    </div>
  );
}