// src/dishes/dishes.service.ts

import { Injectable, BadRequestException } from '@nestjs/common';
import { SupabaseService } from '../supabase/supabase.service';
import { CreateDishDto } from './dto/create-dish.dto';
import { UpdateDishDto } from './dto/update-dish.dto';
import { CreateCommentDto } from './dto/create-comment.dto'; // ‚úÖ –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤–∏–π DTO

@Injectable()
export class DishesService {
  constructor(private readonly supabaseService: SupabaseService) {}

  private get client() {
    return this.supabaseService.getClient();
  }

  async createDish(dish: CreateDishDto) {
    const { data, error } = await this.client.from('dishes').insert([dish]);

    if (error) {
      throw new Error(error.message);
    }

    return data;
  }

  async getPaginatedDishes(
    page: number,
    limit: number,
    searchQuery?: string,
    category?: string,
    ingredients?: string[],
    isSelected?: boolean,
  ): Promise<{ data: any[]; count: number; page: number; limit: number }> {
    // 1. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
    const from = (page - 1) * limit;
    const to = page * limit - 1;

    let query = this.client.from('dishes').select('*', { count: 'exact' });

    // 2. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ is_selected
    if (isSelected !== undefined) {
      query = query.eq('is_selected', isSelected);
    }

    // 3. ‚úÖ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é (type)
    // –Ø–∫—â–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å 'all'
    if (category && category !== 'all') {
      query = query.eq('type', category);
    }

    // 4. ‚úÖ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –ø–æ—à—É–∫–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º (Search)
    if (searchQuery) {
      // –£–≤–∞–≥–∞: `or` –±—É–¥–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª–∏—à–µ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä—É,
      // —è–∫—â–æ –≤—ñ–Ω –Ω–µ –ø–æ—î–¥–Ω–∞–Ω–∏–π –∑ —ñ–Ω—à–∏–º–∏, —Ç–æ–º—É –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `filter` –∞–±–æ `or` –Ω–∞ —Ç–æ–º—É –∂ —Ä—ñ–≤–Ω—ñ.
      query = query.or(
        `name_ua.ilike.%${searchQuery}%,name_en.ilike.%${searchQuery}%`,
      );
    }

    // 5. ‚úÖ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞–º–∏ (JSONB)
if (ingredients && ingredients.length > 0) {
    
  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –æ–±'—î–∫—Ç—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É, –¥–µ –∫–æ–∂–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ.
  // –Ø–∫—â–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ - —Ü–µ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ ['–ö—É—Ä—è—Ç–∏–Ω–∞', '–ö–∞—Ä—Ç–æ–ø–ª—è'], –º–∏ —Ñ–æ—Ä–º—É—î–º–æ JSONB-—Ä—è–¥–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É
  
  // üí° –¶–µ –Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, —è–∫–∏–π *–º–∞–≤ –±–∏* –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –ø–æ—à—É–∫—É "—Ö–æ—á–∞ –± –æ–¥–∏–Ω"
  // —É –º–∞—Å–∏–≤—ñ –æ–±'—î–∫—Ç—ñ–≤ –∑–∞ –∫–ª—é—á–µ–º 'name_ua', —è–∫—â–æ PostgREST –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.
  // –í—ñ–Ω —à—É–∫–∞—î –ø–µ—Ä–µ—Ç–∏–Ω (contains/overlap).
  
  const ingredientsToSearch = ingredients.map(name_ua => ({ name_ua }));
  const searchJsonb = JSON.stringify(ingredientsToSearch);

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ filter (—è–∫–∏–π —Ä—ñ–≤–Ω–æ–∑–Ω–∞—á–Ω–∏–π .or() –¥–ª—è —Ü—å–æ–≥–æ –≤–∏–ø–∞–¥–∫—É)
  // –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä `cs` (–º—ñ—Å—Ç–∏—Ç—å)
  query = query.filter(
      'important_ingredients', // –°—Ç–æ–≤–ø–µ—Ü—å
      'cs',                    // –û–ø–µ—Ä–∞—Ç–æ—Ä "–º—ñ—Å—Ç–∏—Ç—å" (contains)
      searchJsonb              // –ó–Ω–∞—á–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
  ); 
  
  // ‚ùå –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–æ–¥, —â–æ –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç:
  /*
  const ingredientOrConditions = ingredients.map((ingName) => {
    return `important_ingredients.cs.'[{"name_ua": "${ingName}"}]'`;
  });
  const orConditions = ingredientOrConditions.join(',');
  query = query.or(orConditions);
  */
}

    // 6. –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    query = query.order('id', { ascending: true });

    // 7. –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
    // –£–≤–∞–≥–∞: –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –º–∞—î –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏—Å—è –û–°–¢–ê–ù–ù–¨–û–Æ.
    query = query.range(from, to);

    const { data, count, error } = await query;

    // ... (–æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö)
    if (error) {
      console.error(error);
      // –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ Supabase –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
      throw new BadRequestException(
        `–ü–æ–º–∏–ª–∫–∞ Supabase –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: ${error.message}`,
      );
    }

    return {
      data: data || [],
      count: count || 0,
      page,
      limit,
    };
  }

  // async getAllDishes(isSelected?: boolean) {
  //   let query = this.client.from('dishes').select('*');

  //   if (isSelected !== undefined) {
  //     query = query.eq('is_selected', isSelected);
  //   }

  //   const { data, error } = await query;

  //   if (error) {
  //     throw new Error(error.message);
  //   }

  //   return data;
  // }

  async getDishById(id: number) {
    // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Ç, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ä–∞–∑–æ–º –∑—ñ —Å—Ç—Ä–∞–≤–æ—é
    const { data, error } = await this.client
      .from('dishes')
      .select('*, comments(*, user:user_id(*))')
      .eq('id', id)
      .single();

    if (error) {
      throw new Error(error.message);
    }

    return data;
  }

  async updateDish(id: number, dto: UpdateDishDto) {
    const { data, error } = await this.client
      .from('dishes')
      .update(dto)
      .eq('id', id)
      .select();

    if (error) {
      throw new Error(error.message);
    }

    return data ? data[0] : null;
  }

  async deleteDish(id: number) {
    const { data, error } = await this.client
      .from('dishes')
      .delete()
      .eq('id', id)
      .select();

    if (error) {
      throw new Error(error.message);
    }

    return data ? data[0] : null;
  }

  // async searchDishes(query: string) {
  //   const { data, error } = await this.client
  //     .from('dishes')
  //     .select('*')
  //     .or(`name_ua.ilike.%${query}%,name_en.ilike.%${query}%`);

  //   if (error) {
  //     throw new Error(error.message);
  //   }

  //   return data;
  // }

  async selectDish(id: number) {
    return this.updateDish(id, { is_selected: true });
  }

  async unselectDish(id: number) {
    return this.updateDish(id, { is_selected: false });
  }

  // ‚úÖ –ù–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏

  async getCommentById(commentId: number) {
    const { data, error } = await this.client
      .from('comments')
      // .select('*')
      .select('*, user:user_id(*), dish:dish_id(*)')
      .eq('id', commentId)
      .single();

    if (error) {
      throw new Error(error.message);
    }
    return data;
  }

  /**
   * –î–æ–¥–∞—î –Ω–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Å—Ç—Ä–∞–≤–∏.
   */
  async addComment(createCommentDto: CreateCommentDto) {
    // –í Supabase —Ü—ñ –ø–æ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω—é—é—Ç—å—Å—è.
    // –Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î userId –≤ DTO, —Ç–æ –π–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ.
    const { data, error } = await this.client
      .from('comments')
      .insert([createCommentDto])
      .select();

    if (error) {
      throw new Error(error.message);
    }
    return data[0];
  }

  /**
   * –í–∏–¥–∞–ª—è—î –∫–æ–º–µ–Ω—Ç–∞—Ä –∑–∞ –π–æ–≥–æ ID.
   */
  async deleteComment(commentId: number) {
    const { data, error } = await this.client
      .from('comments')
      .delete()
      .eq('id', commentId)
      .select();

    if (error) {
      throw new Error(error.message);
    }
    return data[0];
  }

  async getAllComments() {
    const { data, error } = await this.client
      .from('comments')
      .select(
        '*, user:user_id(firstName, lastName, email), dish:dish_id(name_ua, name_en, photo)',
      ); // ‚úÖ –í–∫–ª–∞–¥–µ–Ω–∏–π –∑–∞–ø–∏—Ç

    if (error) {
      throw new Error(error.message);
    }

    return data;
  }

  async getSelectedDishes() {
    const { data, error } = await this.client
      .from('dishes')
      .select('*')
      .eq('is_selected', true);
  
    if (error) {
      console.error('Supabase error in getSelectedDishes:', error);
      throw new BadRequestException('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∏–±—Ä–∞–Ω–∏—Ö —Å—Ç—Ä–∞–≤');
    }
  
    return data;
  }
}
