// src/partners/partners.service.ts

import { Injectable, BadRequestException } from '@nestjs/common';
import { SupabaseService } from '../supabase/supabase.service';
import { CreatePartnerDto } from './dto/create-partner.dto';
import * as bcrypt from 'bcrypt';
import { Partner } from './interfaces/partner.interface'; // <--- –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ —ñ–º–ø–æ—Ä—Ç—É—î—Ç–µ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å Partner
import { UpdatePartnerDto } from './dto/update-partner.dto';
// import { ChangePartnerPasswordDto } from './dto/change-partner-password.dto';

@Injectable()
export class PartnersService {
  constructor(private readonly supabaseService: SupabaseService) {}

  private get client() {
    return this.supabaseService.getClient();
  }

  async createPartner(dto: CreatePartnerDto) {
    const hashedPassword = await bcrypt.hash(dto.password, 10);
  
    const { data, error } = await this.client
      .from('partners')
      .insert([{
        ...dto,
        password: hashedPassword,
        role: dto.role ?? 'partner',   // <-- –¥–µ—Ñ–æ–ª—Ç partner
        isBlocked: dto.isBlocked ?? false, // <-- –¥–µ—Ñ–æ–ª—Ç false
      }])
      .select();
  
    if (error) throw new BadRequestException(error.message);
    return data[0];
  }

  async getAllPartners() {
    const { data, error } = await this.client.from('partners').select('*');
    if (error) throw new BadRequestException(error.message);
    return data;
  }

  async findOneByEmail(email: string) {
    const { data, error } = await this.client
      .from('partners')
      .select('*')
      .eq('email', email)
      .single();

    if (error || !data) return null;
    return data;
  }

  // --- –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥ findOneById ---
  async findOneById(id: string): Promise<any | undefined> {
    console.log(`==> PartnersService: –ü–æ—à—É–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∑–∞ ID: ${id}`);
    const { data, error } = await this.client
      .from('partners')
      .select('*')
      .eq('id', id)
      .single();

    if (error && error.code !== 'PGRST116') {
      console.error('==> PartnersService: –ü–æ–º–∏–ª–∫–∞ Supabase:', error);
      throw new BadRequestException(error.message);
    }
    console.log('==> PartnersService: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É:', data);
    return data;
  }

  async deletePartner(id: string) {
    // –Ø–∫—â–æ —î –∑–∞–ª–µ–∂–Ω—ñ –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, partner-dishes), –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è,
    // —â–æ —É –ë–î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ ON DELETE CASCADE –∞–±–æ –≤–∏–¥–∞–ª—è–π —ó—Ö —Å–ø–æ—á–∞—Ç–∫—É.
    const { data, error } = await this.client
      .from('partners')
      .delete()
      .eq('id', id)
      .select()
      .single();

    if (error) throw new BadRequestException(error.message);
    return data; // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑–∞–ø–∏—Å (–∞–±–æ –º–æ–∂–µ—à –≤—ñ–¥–¥–∞—Ç–∏ { success: true })
  }

  async toggleBlockPartner(id: string) {
    const partner = await this.findOneById(id);
    if (!partner) {
      throw new BadRequestException('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
    }

    const newStatus = !partner.isBlocked;

    const { data, error } = await this.client
      .from('partners')
      .update({ isBlocked: newStatus })
      .eq('id', id)
      .select();

    if (error) throw new BadRequestException(error.message);

    return data[0];
  }
  async updatePartner(id: string, dto: UpdatePartnerDto) {
    const partner = await this.findOneById(id);
    if (!partner) {
      throw new BadRequestException('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
    }
  
    const updateData: any = { ...dto };
  
    if (dto.password) {
      updateData.password = await bcrypt.hash(dto.password, 10);
    }
  
    // üîπ –Ø–∫—â–æ socials –ø–µ—Ä–µ–¥–∞–Ω—ñ, –∑–±–µ—Ä–µ–∂–µ–º–æ —ó—Ö —É JSONB
    if (dto.socials) {
      updateData.socials = dto.socials;
    }
  
    const { data, error } = await this.client
      .from('partners')
      .update(updateData)
      .eq('id', id)
      .select();
  
    if (error) throw new BadRequestException(error.message);
  
    return data[0];
  }
  async updatePassword(id: string, hashedPassword: string) {
    const { data, error } = await this.client
      .from('partners')
      .update({ password: hashedPassword })
      .eq('id', id)
      .select()
      .single();
  
    if (error) throw new BadRequestException(error.message);
  
    return data;
  }
  async changePassword(id: string, currentPassword: string, newPassword: string) {
    const partner = await this.findOneById(id);
    if (!partner) throw new BadRequestException('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
  
    const isMatch = await bcrypt.compare(currentPassword, partner.password);
    if (!isMatch) throw new BadRequestException('–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π');
  
    const hashedPassword = await bcrypt.hash(newPassword, 10);
  
    const { data, error } = await this.client
      .from('partners')
      .update({ password: hashedPassword })  // —Ç—ñ–ª—å–∫–∏ –ø–∞—Ä–æ–ª—å
      .eq('id', id)
      .select()
      .single();
  
    if (error) throw new BadRequestException(error.message);
  
    return data;
  }
}
